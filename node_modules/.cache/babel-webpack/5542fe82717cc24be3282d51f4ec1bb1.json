{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/vanbr/Documents/angular-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class loginDetails {\n  constructor(init) {\n    this.userID = '';\n    this.CompanyId = '';\n    this.AccessToken = '';\n    this.isLogged = false;\n    Object.assign(this, init);\n  }\n\n}\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.logDetails = new BehaviorSubject({\n      userID: sessionStorage.getItem('userID') ? sessionStorage.getItem('userID') : '',\n      AccessToken: sessionStorage.getItem('AccessToken') ? sessionStorage.getItem('AccessToken') : '',\n      CompanyId: sessionStorage.getItem('CompanyId') ? sessionStorage.getItem('CompanyId') : '',\n      isLogged: sessionStorage.getItem('AccessToken') ? true : false\n    });\n    this.loggedUser = new BehaviorSubject(new User());\n  }\n\n  authenticateUser(email, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.http.post(\"User/authenticate\", {\n        Email: email.toLowerCase(),\n        Password: password\n      }).subscribe(authResponse => {\n        for (let item in authResponse) {\n          //@ts-ignore\n          sessionStorage.setItem(item.toString(), authResponse[item.toString()]);\n        }\n\n        _this.logDetails.next({\n          userID: authResponse.userID,\n          AccessToken: authResponse.AccessToken,\n          CompanyId: authResponse.CompanyId,\n          isLogged: true\n        });\n\n        if (authResponse.AccessToken) {\n          _this.fetchMyUser(authResponse.userID).subscribe(result => {\n            _this.loggedUser.next(result);\n          });\n        }\n      });\n    })();\n  }\n\n  fetchMyUser(userID = this.logDetails.getValue().userID) {\n    return this.http.get(\"User/\" + userID);\n  }\n\n  logOut() {\n    this.logDetails.next(new loginDetails());\n    this.loggedUser.next(new User());\n    sessionStorage.clear();\n  }\n\n  getLogDetails() {\n    return this.logDetails.asObservable();\n  }\n\n  getLoggedUser() {\n    return this.loggedUser.asObservable();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\vanbr\\Documents\\angular-frontend\\src\\app\\services\\auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { Company, User } from '../models';\r\n\r\ninterface authResponse {\r\n  userID: string,\r\n  CompanyId: string,\r\n  AccessToken: string\r\n}\r\nexport class loginDetails {\r\n  public userID: string = '';\r\n  public CompanyId: string = '';\r\n  public AccessToken: string = '';\r\n  public isLogged: boolean = false;\r\n  public constructor(init?: Partial<loginDetails>) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  logDetails = new BehaviorSubject<loginDetails>({\r\n    userID: sessionStorage.getItem('userID') ? sessionStorage.getItem('userID')! : '',\r\n    AccessToken: sessionStorage.getItem('AccessToken') ? sessionStorage.getItem('AccessToken')! : '',\r\n    CompanyId: sessionStorage.getItem('CompanyId') ? sessionStorage.getItem('CompanyId')! : '',\r\n    isLogged: sessionStorage.getItem('AccessToken') ? true : false,\r\n  });\r\n  loggedUser = new BehaviorSubject<User>(new User);\r\n  constructor(private http: HttpClient) { }\r\n  async authenticateUser(email: string, password: string): Promise<void> {\r\n    this.http.post<authResponse>(\"User/authenticate\", { Email: email.toLowerCase(), Password: password }).subscribe((authResponse: authResponse) => {\r\n      for (let item in authResponse) {\r\n        //@ts-ignore\r\n        sessionStorage.setItem(item.toString(), authResponse[item.toString()])\r\n      }\r\n      this.logDetails.next({ userID:authResponse.userID,AccessToken:authResponse.AccessToken,CompanyId:authResponse.CompanyId, isLogged: true })\r\n      if (authResponse.AccessToken) {\r\n        this.fetchMyUser(authResponse.userID).subscribe(result => {\r\n          this.loggedUser.next(result);\r\n        })\r\n      }\r\n    });\r\n  }\r\n  fetchMyUser(userID: string = this.logDetails.getValue().userID): Observable<User> {\r\n    return this.http.get<User>(\"User/\" + userID);\r\n  }\r\n  logOut(): void {\r\n    this.logDetails.next(new loginDetails);\r\n    this.loggedUser.next(new User);\r\n    sessionStorage.clear();\r\n  }\r\n  public getLogDetails(): Observable<loginDetails> {\r\n    return this.logDetails.asObservable();\r\n  }\r\n  public getLoggedUser(): Observable<User> {\r\n    return this.loggedUser.asObservable();\r\n  }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}